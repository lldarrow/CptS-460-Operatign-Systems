/*************************************
Luke Darrow 11349190
CptS 460 Lab 4 kernel.c
*************************************/

extern int goUmode();
PROC *kfork();

//creates a child proc and returns the child pid. when scheduled
//to run, the child process resumes to body()
PROC *kfork(char *filename) // create a child process, begin from body()
{
    PROC *p;
    int i, child;
    u16 segment;
    
    // Get the new proc
    p = get_proc(&freeList);

    if (p == 0)
    {
        // if there were no procs, report kfork's failure
        printf("No available free procs\n");
        return 0;
    }
    
    // initialize the proc
    p->status = READY;
    p->ppid = running->pid;
    p->parent = running;
    p->priority = 1;
    
    // set up the kstack
    // first things first, lets clean up the registers by setting them to 0.
    for (i = 1; i<10; i++)
        p->kstack[SSIZE - i] = 0;
        
    p->kstack[SSIZE - 1] = (int)goUmode; // now we need to make sure to call tswitch from body when the proc runs...
    p->ksp = &(p->kstack[SSIZE - 9]); // set the ksp to point to the top of the stack

    enqueue(&readyQueue, p);
    printf("readyQueue ");
    printQueue(readyQueue);
    nproc++;
    segment = (p->pid + 1) * 0x1000;

    if(filename)
    {
        // create Umode image
        load(filename, segment);
        // fill in Umode information in proc
        for(i=1; i <= 12; i++)
            put_word(0, segment, -2 * i);

        put_word(0x0200, segment, -2);
        put_word(segment, segment, -4);
        put_word(segment, segment, -22);
        put_word(segment, segment, -24);

        p->usp = -24;
        p->uss = segment;
    }
    
    // enter the proc into the readyQueue, since it's ready
    printf("Proc %d forked child Proc %d at segment 0x%x\n", running->pid, p->pid, segment);

    //return the new prok
    return p;
}

//just calls switch
int do_tswitch()
{
	printf("proc %d tswitch()\n", running->pid);
	tswitch();
	printf("proc %d resumes\n", running->pid);
}

//just like class notes
int do_kfork()
{
	//get pointer to child process from kfork()
	PROC *p = kfork("/bin/u1");

	//if 0, kfork failed!
	if (p == 0)
	{
		printf("kfork failed\n");
		return -1;
	}
	else
	{
		//print results
		printf("PROC %d kfork a child %d\n", running->pid, p->pid);
		//return the pid of the newly forked process
		return p->pid;
	}
}

//changes running process status to ZOMBIE, then calls tswitch() to give up CPU
int do_exit()
{
	int exitValue;

	if (running->pid == 1 && nproc > 2){
		printf("other procs still exist, P1 can't die yet\n");
		return -1;
	}

	//ask for exitValue
	printf("enter an exitValue (0-9): ");

	exitValue = (getc()&0x7F) - '0';
	printf("%d\n", exitValue);

	//call kexit converting exitValue to integer
	kexit(exitValue);
}

//stops process to wait for an event
int do_sleep()
{
	int event = 0;
	//ask for eventValue (value), e.g. 123
	printf("enter an eventValue: ");
	//rgets(input);
	event = (getc()&0x7F) - '0';

	//call kexit after converting input to integer
	ksleep(event);
}

//wakeup sleeping process for event
int do_wakeup()
{
	int event = 0;

	//ask for eventValue (value), e.g. 123
	printf("enter an exitValue: ");
	//rgets(input);
	event = (getc()&0x7F) - '0';
	printf("%d\n", event);

	//call kexit converting exitValue to integer
	kwakeup(event);
}

//free's up a zombies resources and puts it back in the ready queue
int do_wait()
{
	int pid;
	int status;

	pid = kwait(&status);
	if(pid)
		printf("pid=%d, status=%d\n", pid, status);
	else
		printf("wait error: no child\n");
}

//body function from earlier labs
int body()
{ 
	char c;

	printf("proc %d starts from body()\n", running->pid);

	while(1)
	{
		printf("-----------------------------------------\n");
		//prints the list of procs that are initialized and free
		printf("freelist = ");
		printQueue(freeList);

		//print ready queue which are procs that are ready
		printf("readyQueue = ");
		printQueue(readyQueue);

		//print sleep list
		printf("sleepList = ");
		printQueue(sleepList);

		printf("-----------------------------------------\n");

		printf("proc %d running: parent=%d\n",running->pid,running->ppid);
		printf("enter a char [s|f|q|z|a|w|u] : ");

		c = getc();
		printf("%c\n", c);

		switch(c)
		{
			case 'f': //fork a child off of the current process
				do_kfork();
				break;
			case 's': //switch to next process in ready queue
				do_tswitch();
				break;
			case 'q': //zombie the current process
				do_exit();
				break;
			case 'z': //running PROC go to sleep on an event value
				do_sleep();
				break;
			case 'a': //wakeup all PROCs sleeping on event
				do_wakeup();
				break;
			case 'w': //to wait for a ZOMBIE child
				do_wait();
				break;
			case 'u':
				goUmode();
				break;
		}
	}
}
