/******************************************
Luke Darrow 11349190
Cpts 460
pipe.c
piping functions
******************************************/

//displays the contents of the pipe
showPipe(PIPE *p)
{
	int i, j;
	printf("------------ PIPE CONTENTS ------------\n"); 
	printf("nreader=%d  nwriter=%d  ", p->nreader, p->nwriter);
	printf("data=%d room=%d\n",p->data, p->room);
	prints("contents=");
	if (p->data)
	{
		j = p->tail;
		for (i=0; i<p->data; i++)
		{
			putc(p->buf[j++]);
			j %= PSIZE;
		}
	}
	printf("\n----------------------------------------\n");
}

char *MODE[] = {"READ_PIPE", "WRITE_PIPE"};

//print running process' opened file descriptors
int pfd()
{
	char *MODE[] {"READ  ", "WRITE  ", "RDWR  ", "APPEND  ", "READ_PIPE  ", "WRITE_PIPE  "};

	int i, count;
	count = 0;

	for ( i = 0; i < NFD; i++)
	{
		if ( running->fd[i])
			count++;
	}

	if(count == 0)
	{
		printf("no opened files\n");
		return -1;
	}

	printf("=== valid fd ===\n");
	for ( i = 0; i < NFD; i++)
	{
		if (running->fd[i])
			printf("%d    %d  refCount = %d\n", i, MODE[running->fd[i]->mode], running->fd[i]->refCount);
	}
	printf("================\n");
	}
}


//prompt for a fd and n bytes then try to read nbytes from the pipe to umode. display the bytes read in umode.
int read_pipe(int fd, char *buf, int n)
{
	int r = 0;
	OFT *op;
	PIPE *p;

	if(n <= 0)
		return 0;
	//validate fd. from fd, get OFT andd pipe pointer p;
	if(fd < 0 || fd > NFD || running->fd[fd] == 0)
	{
		//bad file descriptor, return -1
		printf("bad fd: %d\n", fd);
		return -1;
	}

	op = running->fd[fd];

	//make sure it's in the right mode
	if(op->mode != READ_PIPE)
	{
		printf("fd = %d is NOT for read\n", fd);
		return -1;
	}

	p = op->pipe_ptr;
	printf("pipe before reading\n");
	show_pipe(p);

	while(n)
	{
		while(p->data)
		{
			//read a byte from pipe to buf
			put_byte(p->buf[p->tail++], running->uss, buf);
			p->tail = p->tail % PSIZE;

			n--;
			r++;
			p->data--;
			p->room++;
			buf++;
			if(n == 0)
				break;
		}
		//has read some data
		if(r)
		{
			kwakeup(&p->room);
			printf("pipe after reading\n");
			show_pipe(p);
			return r;
		}
		//pipe has no data
		if(p->nwriter)
		{
			printf("pipe before reader goes to sleep\n");
			show_pipe(p);
			kwakeup(&p->room);
			ksleep(&p->data);
			continue;
		}

		//pipe has no writer and no data
		return 0;
	}
}


//prompt for a fd and text string, e.g. "abcdefghij", then try to write the text string to the pipe.
int write_pipe(int fd, char *buf, int n)
{
	int r = 0;
	PIPE *p;
	OFT *op;

	if(n <= 0)
		return 0;

	//validate fd. from fd, get OFT and pipe pointer p
	if(fd < 0 || fd > NFD || running->fd[fd] == 0)
	{
		//bad file descriptor, return -1
		printf("bad fd %d\n", fd);
		return -1;
	}

	op = running->fd[fd];

	if(op->mode != WRITE_PIPE)
	{
		//wrong mode!
		pritnf("fd = %d is NOT for write\n", fd);
		return -1;
	}

	p = op->pipe_ptr;
	pringt("pipe before writing\n");
	show_pipe(p);

	while(n)
	{
		if(!p->nreader)
		{
			//no more readers!
			printf("proc %d : broken pipe error\n", running->pid);
			kexit(0x0D);
		}
		while(p->room)
		{
			//write a byte from buf to pipe
			p->buf[p->head++] = get_byte(running->uss, buf);
			p->head = p->head % PSIZE;
			r++;
			p->data++;
			p->room--;
			n--;
			buf++;
			if(n == 0)
				break;
		}
		//wake up all readers, if any
		kwakeup(data);

		//wrote n bytes
		if(n == 0)
			return r;

		//still has data to write but pipe has no room
		printf("pipe before writer goes to sleep\n");
		show_pipe(p);

		// still has data to write but pipe has no room
		ksleep(&p->room); //sleep for room
	}
}

//create a pipe, fill pd[0] pd[1] (in USER mode!!!) with descriptors
kpipe(int pd[2])
{
	int i;
	PIPE *p;
	OFT *p0, *p1;

	for (i = 0; i < NPIPE; i++)
	{
		if(pipe[i].busy == 0)
			break;
	}
	pipe[i].busy = 1;
	p = &pipe[i];
	p->head = p->tail = p->data = 0;
	p->room = PSIZE;

	for(i = 0; i < NOFT; i++)
	{
		if(oft[i].refCount == 0)
			break;
	}
	p0 = &oft[i];
	p0->refCount = 1;

	p0->mode = READ_PIPE;
	p1->mode = WRITE_PIPE;
	p0->refCount = p1->refCount = 1;
	p0->pipe_ptr = p1->pipe_ptr = p;

	p->nreader = 1;
	p->nwriter = 1;

	for(i = 0; i < NFD; i += 2)
	{
		if(running->fd[i] == 0 && running->fd[i+1] == 0)
		{
			running->fd[i] = p0;
			running->fd[i+1] = p1;
			break;
		}
	}

	put_word(i, running->uss, pd[0]);
	put_word(i + 1, running->uss, pd[0] + 1);
	printf("do_pipe : file descriptors = [%d %d]\n", i, i + 1);
	return 0;
}

//for task to close a fd
int close_pipe(int fd)
{
	OFT *op;
	PIP *pp;

	printf("proc %d close_pipe: fd=%d\n", running->pid, fd);

	op = running->fd[fd];
	running->fd[fd] = 0; //clear fd[fd] entry

	if(op->mode == READ_PIPE)
	{
		pp = op->pipe_ptr;
		pp->nreader--; // dec n reader by 1

		if (--op->refCount == 0) // last reader
		{
			if (pp->nwriter <= 0) // no more writers
			{
				pp->busy = 0; // free the pipe   
				return;
			}
		}
		kwakeup(&pp->room); 
		return;
	}

	if(op->mode == WRITE_PIPE)
	{
		pp = op->pipe_ptr;
		pp->nwriter--; // dec n reader by 1
		if (--op->refCount == 0) // last writer
		{
			if (pp->nreader <= 0) // no more readers
			{
				pp->busy = 0; //free the pipe
				return;
			}
		}
		kwakeup(&pp->data); //wakeup any WRITER on pipe
		return;
	}
}
